name: CI
#on:
#  pull_request: {}
#  push: { branches: [master] }

on: [push]

jobs:

  testRunnerInAllModes:
    name: Unity test
    runs-on: ubuntu-latest
    env:
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
    steps:
      # Checkout repository (required to test local actions)
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Unity - Activate
        uses: webbertakken/unity-activate@v1

      - run: ls -l
        
      - name: 'Generate C# Solution'
        uses: ncipollo/unity-action@master
        with: 
            license: ${{ secrets.UNITY_LICENSE }}
            mode: build
            build_method: UnityEditor.SyncVS.SyncSolution

    #   - name: Unity - Builder
    #     uses: webbertakken/unity-builder@v0.3
    #     with:
    #       projectPath: "."
    #       unityVersion: "2019.2.11f1"
    #       buildCommand: "UnityEditor.SyncVS.SyncSolution"
    #       targetPlatform: StandaloneWindows64

      - run: ls -l

      # Configure test runner
      - name: Run tests
        uses: webbertakken/unity-test-runner@v1.1
        env:
          UNITY_PROJECT_PATH: .
          TEST_MODE: all

      - name: Sonarscanner for dotnet
        uses: Secbyte/dotnet-sonarscanner@v1.2
        with:
          buildCommand: dotnet build .
          projectKey: MirrorNG_MirrorNG
          projectName: MirrorNG
          sonarOrganisation: mirrorng
          beginArguments: /d:sonar.verbose="true"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            
      # Upload artifacts
      - name: Expose as artifact
        uses: actions/upload-artifact@v1
        with:
          name: Test results (all modes)
          path: ${{ steps.testRunner.outputs.artifactsPath }}

      # Return License
      - name: Return license
        if: always()
        uses: webbertakken/unity-return-license@v0.1
